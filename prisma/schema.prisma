// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Store {
  id                BigInt      @id @default(autoincrement())
  shop              String      @unique @db.VarChar(255) // Shopify shop domain
  name              String?     @db.VarChar(255) // Store name
  email             String?     @db.VarChar(255) // Store owner email
  domain            String?     @db.VarChar(255) // Primary domain
  country           String?     @db.VarChar(100) // Store country
  currency          String?     @db.VarChar(10) // Store currency
  timezone          String?     @db.VarChar(100) // Store timezone
  planName          String?     @db.VarChar(100) // Shopify plan name
  isActive          Boolean     @default(true) // Whether store is active
  installedAt       DateTime    @default(now()) // When app was installed
  uninstalledAt     DateTime? // When app was uninstalled
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  employees         Employee[] // Relation to employees
  settings          Settings? // Relation to settings
  services          Service[] // Relation to services
  resources         Resource[] // Relation to resources
  resourceTypes     ResourceType[] // Relation to resource types
  
  @@index([shop])
  @@index([isActive])
  @@index([installedAt])
}

model Settings {
  id                        BigInt    @id @default(autoincrement())
  shop                      String    @db.VarChar(255) // Shop domain for quick lookups
  storeId                   BigInt    @unique // Foreign key to Store
  store                     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  workingHoursStart         String    @default("09:00") @db.VarChar(5) // Start time (HH:MM format)
  workingHoursEnd           String    @default("17:00") @db.VarChar(5) // End time (HH:MM format)
  openDays                  String    @default("1,2,3,4,5") @db.VarChar(50) // Comma-separated day numbers (0=Sunday, 1=Monday, etc.)
  useResources              Boolean   @default(false) // Whether to use resources for bookings
  limitBookingWindow        Boolean   @default(false) // Whether to limit how far in advance customers can book
  bookingWindow             Int       @default(30) // Number of days in advance customers can book (when limitBookingWindow is true)
  limitAppointments         Boolean   @default(false) // Whether to limit the number of displayed appointments
  maxAppointmentsDisplayed  Int       @default(10) // Maximum number of appointments to display (when limitAppointments is true)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  
  @@index([shop])
  @@index([storeId])
}

model Employee {
  id                BigInt     @id @default(autoincrement())
  name              String     @db.VarChar(255) // Employee name
  avatarUrl         String?    @db.Text // Employee avatar/photo URL
  shop              String     @db.VarChar(255) // Shop domain for quick lookups
  storeId           BigInt // Foreign key to Store
  store             Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  serviceIds        Json?      // Array of service IDs this employee can provide
  isActive          Boolean    @default(true) // Whether employee is active
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  schedules         Schedule[] // Relation to schedules
  
  @@index([shop])
  @@index([storeId])
  @@index([isActive])
}

model Schedule {
  id                BigInt    @id @default(autoincrement())
  employeeId        BigInt
  employee          Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  shop              String    @db.VarChar(255) // Shop domain for quick lookups
  date              DateTime  @db.Date // The date for this schedule
  slots             Json      // Array of slot objects: [{startTime, endTime, isAvailable, bookingId}]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@unique([employeeId, date])
  @@index([employeeId])
  @@index([shop])
  @@index([date])
  @@index([employeeId, date])
}

model Service {
  id                BigInt       @id @default(autoincrement())
  productId         String       @db.VarChar(255) // Shopify product ID
  productTitle      String       @db.VarChar(255) // Product title
  variantId         String?      @db.VarChar(255) // Shopify variant ID (if specific variant)
  variantTitle      String?      @db.VarChar(255) // Variant title
  imageUrl          String?      @db.Text // Product or variant image URL
  duration          Int          // Duration in minutes
  shop              String       @db.VarChar(255) // Shop domain for quick lookups
  storeId           BigInt       // Foreign key to Store
  store             Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  resourceTypeId    BigInt?      // Optional foreign key to ResourceType
  resourceType      ResourceType? @relation(fields: [resourceTypeId], references: [id], onDelete: SetNull)
  isActive          Boolean      @default(true) // Whether service is active
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@unique([productId, variantId, shop])
  @@index([shop])
  @@index([storeId])
  @@index([productId])
  @@index([resourceTypeId])
  @@index([isActive])
}

model Subscription {
  id                BigInt    @id @default(autoincrement())
  shop              String    @db.VarChar(255)
  subscriptionId    String    @unique @db.VarChar(255) // Shopify subscription ID
  planName          String    @db.VarChar(50) // "Basic" or "Premium"
  amount            Float     // Subscription price
  status            String    @db.VarChar(50) // "ACTIVE", "CANCELLED", "EXPIRED", etc.
  isTest            Boolean   @default(false) // Whether this is a test charge
  confirmationUrl   String?   @db.Text // Shopify confirmation URL
  chargeId          String?   @db.VarChar(255) // Charge ID from confirmation
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  activatedAt       DateTime? // When the subscription was activated
  cancelledAt       DateTime? // When the subscription was cancelled
  
  @@index([shop])
  @@index([subscriptionId])
  @@index([status])
  @@index([createdAt])
}

model ResourceType {
  id                BigInt     @id @default(autoincrement())
  name              String     @db.VarChar(255) // Type name (e.g., "Meeting Rooms", "Equipment")
  shop              String     @db.VarChar(255) // Shop domain for quick lookups
  storeId           BigInt     // Foreign key to Store
  store             Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  resources         Resource[] // Resources of this type
  services          Service[]  // Services that require this resource type
  isActive          Boolean    @default(true) // Whether type is active
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  @@index([shop])
  @@index([storeId])
  @@index([isActive])
}

model Resource {
  id                BigInt       @id @default(autoincrement())
  name              String       @db.VarChar(255) // Resource name (e.g., "Meeting Room A", "Projector")
  description       String?      @db.Text // Optional description
  quantity          Int          @default(1) // Number of available units
  shop              String       @db.VarChar(255) // Shop domain for quick lookups
  storeId           BigInt       // Foreign key to Store
  store             Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  resourceTypeId    BigInt       // Foreign key to ResourceType
  resourceType      ResourceType @relation(fields: [resourceTypeId], references: [id], onDelete: Cascade)
  isActive          Boolean      @default(true) // Whether resource is active
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@index([shop])
  @@index([storeId])
  @@index([resourceTypeId])
  @@index([isActive])
}
